// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/logs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find all logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Find All Logs (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "null"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/logs/{find}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find all logs of a user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Find All Logs of a User (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "null"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/promote/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Promote user admin by id or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Promote user admin (You will need send a JWT token of an administration user in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Find All Users (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "null"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/user/active/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Active user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Active User (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/user/inative/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Inative user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Inative User (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/user/{find}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Find User (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete User (You will need send a JWT token of a admin user, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "JWT Login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.LoginResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "create user with e-mail and password if the e-mail doesnt already exists and the password is strong",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "Create user",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/2fa/active/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Active 2FA by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Active 2FA (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/2fa/desactive/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Desactive 2FA by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Desactive 2FA (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/changeEmail/{find}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change Email by id or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change Email (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Change Email Request",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.ChangeEmailRequest"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/changePassword/{find}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change Password by id or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change Password (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Change Password Request",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/changePasswordInRecovery/{find}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change Password in recovery by id or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change Password in recovery (You will need send a valid and not expired code with your new password)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ChangePasswordInRecoveryRequest",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.ChangePasswordInRecoveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/sendChangeEmailCode/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send Email Verification Code by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Send Email Verification Code (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/sendEmailVerificationCode/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send Email Verification Code by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Send Email Verification Code (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/sendPasswordRecoveryCode/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Send Password Recovery Code by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Send Password Recovery Code (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/verifyChangeEmailCode/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verify Email by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify Change Email Code (You will need send a JWT token in authorization header, you can get it in the login route) and a valid code",
                "parameters": [
                    {
                        "description": "Verify Change Email Code",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.Code"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/verifyEmail/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verify Email by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify Email (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "description": "Verify Email",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.Code"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/verifyPasswordRecoveryCode/{find}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Verify Password Recovery Code by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify Password Recovery Code (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "description": "Password Recovery Code",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_dtos.Code"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{find}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Find User (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_dtos.UserWithoutSensitiveData"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete user by e-mail or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete User (You will need send a JWT token in authorization header, you can get it in the login route)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search parameter: e-mail or id",
                        "name": "find",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/utils_interfaces.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "log_entities.Log": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "operationCode": {
                    "type": "string"
                },
                "route": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "user_dtos.ChangeEmailRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "123456"
                },
                "email": {
                    "type": "string",
                    "example": "fulano@fulano.com"
                }
            }
        },
        "user_dtos.ChangePasswordInRecoveryRequest": {
            "type": "object",
            "required": [
                "code",
                "newPassword"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "123456"
                },
                "newPassword": {
                    "type": "string",
                    "example": "aaaaaaaA#1"
                }
            }
        },
        "user_dtos.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "aaaaaaaA#1"
                }
            }
        },
        "user_dtos.Code": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "user_dtos.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fulano@fulano.com"
                },
                "password": {
                    "type": "string",
                    "example": "aaaaaaaA#1"
                }
            }
        },
        "user_dtos.LoginResponse": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "string",
                    "example": "randomJwt"
                }
            }
        },
        "user_dtos.UserWithoutSensitiveData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fulano@fulano.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "inactive": {
                    "type": "boolean",
                    "example": false
                },
                "isAdmin": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "utils_interfaces.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "variable error message"
                },
                "statusCode": {
                    "type": "integer",
                    "example": -1
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "API",
	Description:      "Authentication API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
